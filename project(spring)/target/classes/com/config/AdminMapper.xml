<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="AdminMapper">
	<!-- 1. admin 로그인 -->
	<select id="adminlogin" parameterType="hashmap" resultType="AdminDTO">
		select adminId,adminPasswd
		from admin
		where adminId = #{adminId} and adminPasswd= #{adminPasswd}
	</select>
	
	
	<!-- 2. member 리스트 -->
	<select id="mList"  parameterType="hashmap" resultType="MemberDTO">
		select rownum,mId,mPasswd,mName,mPhone,mLastLogin
		from member
		<if test="searchName=='memberId'">
			where mId like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='memberName'">
			where mName like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='memberPhone'">
			where mPhone like '%'||#{searchValue}||'%'
		</if>
		order by rownum desc
	</select>
	
	<select id="mListTotalCount" resultType="int">
	     select count(*)
	     from member
    </select>
    
    <select id="mListTotalSearchCount" resultType="int" parameterType="hashmap">
	     select count(*)
	     from member
	    <if test="searchName=='memberId'">
			where mId like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='memberName'">
			where mName like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='memberPhone'">
			where mPhone like '%'||#{searchValue}||'%'
		</if>
    </select>

	<!-- 2-2. member 휴면계정리스트 -->
	<select id="mDormantList"  resultType="MemberDTO">
		select rownum,mId,mPasswd,mName,mPhone,mLastLogin,floor(sysdate-mLastLogin) as mLastLogin2 
		from member 
		where (sysdate-mLastLogin)>90
	</select>
	<select id="mDormantListTotalCount" resultType="int">
	     select count(*)
	     from member
	     where (sysdate-mLastLogin)>90
    </select>
	
	
	<!-- 2-3. member 삭제 (휴면계정/마지막 로그인 시간 기록+현재 시간하고 비교하여 3달 이상 미접속 시 삭제처리)-->
	<delete id="mDormantDel" parameterType="string">
		delete 
		from member
		where mId = #{mId}
	</delete>
	
	
	<!-- 3. so 리스트 -->
	<select id="soList" parameterType="hashmap" resultType="SoDTO">
		select rownum,soId,soName,soPhone,soLicense,soPost,soAddr,soLevel
   		from shopowner
   		<if test="searchName=='soId'">
			where soId like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='soName'">
			where soName like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='soLicense'">
			where soLicense like '%'||#{searchValue}||'%'
		</if>
		order by rownum desc
	</select>
	
	<select id="soListTotalCount" resultType="int">
	     select count(*)
	     from shopowner
    </select>
    
    <select id="soListTotalSearchCount" resultType="int" parameterType="hashmap">
	     select count(*)
	     from shopowner
	    <if test="searchName=='soId'">
			where soId like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='soName'">
			where soName like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='soLicense'">
			where soLicense like '%'||#{searchValue}||'%'
		</if>
    </select>
    
	<!-- 3-2. so 리스트 -->
	<select id="soDormantList"  resultType="SoDTO">
		select rownum,soId,soPasswd,soName,soPhone,sLastLogin,floor(sysdate-sLastLogin) as sLastLogin2
		from shopowner 
		where (sysdate-sLastLogin)>90
	</select>
	<select id="soDormantListTotalCount" resultType="int">
     select count(*)
     from shopowner
     where (sysdate-sLastLogin)>90
    </select>
	
	<!-- 3-3. shopowner 삭제 (휴면계정/마지막 로그인 시간 기록+현재 시간하고 비교하여 3달 이상 미접속 시 삭제처리)-->
	<delete id="soDormantDel" parameterType="string">
		delete 
		from shopowner
		where soId = #{soId}
	</delete>
	
	<!-- DB 정의서에 추가해야 함 -->
	<delete id="sDormantDel" parameterType="string">
		delete 
		from shop
		where soId = #{soId}
	</delete>
	
	<!-- 3-4. 회원 레벨이 0인  shopowner-->
	<select id="soList2"  resultType="SoDTO">
		select rownum,soId,soLevel,to_char(soJoindate,'YYYY-MM-DD') as soJoindate
   		from shopowner
   		where soLevel=0
   		order by rownum asc
	</select>
	
	<select id="soList2TotalCount"  resultType="int">
		select count(*)
   		from shopowner
   		where soLevel=0
   		order by rownum desc
	</select>
   
   <!-- 3-5. 가입승인 -->
	<update id="soApprove" parameterType="string">
		update shopowner
		set soLevel='1'
		where soId=#{soId}
	</update>
	
    <!-- 3-6. soLevel 부여 -->
	<update id="soLevelChange" parameterType="hashmap">
		update shopowner
		set soLevel=#{soLevel}
		where soId=#{soId}
	</update>
	
	  <!-- 4. 상점리스트 -->
	  <select id="sList"  parameterType="hashmap" resultType="SDTO">
		select rownum, sCode ,sName ,soId ,sAddr ,sPhone, sSubway 
		from shop
		<if test="searchName=='sName'">
			where sName like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='soId'">
			where soId like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='sAddr'">
			where sAddr like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='sSubway'">
			where sSubway like '%'||#{searchValue}||'%'
		</if>
		order by sCode desc
	</select>
	
	<select id="sListTotalCount" resultType="int">
	     select count(*)
	     from shop
    </select>
    
    <select id="sListTotalSearchCount" resultType="int" parameterType="hashmap">
	     select count(*)
	     from shop
	    <if test="searchName=='sName'">
			where sName like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='soId'">
			where soId like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='sAddr'">
			where sAddr like '%'||#{searchValue}||'%'
		</if>
		<if test="searchName=='sSubway'">
			where sSubway like '%'||#{searchValue}||'%'
		</if>
    </select>
</mapper>